@using Eentities
@using Bbusiness

@inject NavigationManager NavManager


<div class="form-container">
<EditForm Model="@oStorage">
    <DataAnnotationsValidator />
    <div class="form-group">
            <label for="categories" class="bold-label">Bodega:</label>
        <InputSelect id="wherehouses" @bind-Value="oStorage.WhereHouseId" class="form-control">
            <option value="">Seleccionar bodega ...</option>
            @foreach (var wherehouse in warehouses)
            {
                <option value="@wherehouse.WhereHouseId">@wherehouse.WhereHouseName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
            <label for="products" class="bold-label">Producto:</label>
        <InputSelect id="products" @bind-Value="oStorage.ProductId" class="form-control">
            <option value="">Seleccionar producto ...</option>
            @foreach (var product in products)
            {
                <option value="@product.ProductId">@product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
            <input type="button" value="Almacenar Producto" @onclick="Save" class="form-control btn btn-warning form-button" />
    </div>
</EditForm>
</div>


<hr />
<div class="h3 text-center mt-3">
    @message
</div>
<hr />

@code {
    StorageEntity oStorage = new StorageEntity();
    private List<ProductEntity> products = new List<ProductEntity>();
    private List<WhereHouseEntity> warehouses = new List<WhereHouseEntity>();



    private string? message;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_WhereHouse.WherehouseList();
        products = B_Product.ProductList();
        await Task.CompletedTask;
    }

    private void Save()
    {

        try
        {

            if (!string.IsNullOrEmpty(oStorage.WhereHouseId) && !string.IsNullOrEmpty(oStorage.ProductId))
            {
                var id = $"{oStorage.WhereHouseId}-{oStorage.ProductId}";

                if (!B_Storage.IsProductInWarehouse(id))
                {
                    oStorage.StorageId = id;
                    oStorage.LastUpdate = DateTime.Now;

                    // Console.WriteLine($"WhereHouseId: {oStorage.WhereHouseId}");
                    // Console.WriteLine($"ProductId: {oStorage.ProductId}");
                    // Console.WriteLine($"StorageId: {oStorage.StorageId}");
                    // Console.WriteLine($"LastUpdate: {oStorage.LastUpdate}");



                    B_Storage.CreateStorage(oStorage);

                    message = "Producto Registrado";
                }
                else
                {
                    // var oldStorage = B_Storage.GetStorageById(id);
                    message = "El producto ya se encuentra";
                }
            }
            else
            {
                message = $"El producto {oStorage.ProductId} no pudo ser registrado";
            }



            oStorage.WhereHouseId = "";
            oStorage.ProductId = "";
        }
        catch (Exception ex)
        {
            var innerException = ex.InnerException != null ? ex.InnerException.Message : ex.Message;
            message = $"Error al registrar el producto: {innerException}";
        }


    }
   
    
    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }


   
}

